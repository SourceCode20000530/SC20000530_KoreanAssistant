import telebot
import config
import random
import sqlite3

from telebot import types

import time
from datetime import datetime, timedelta

import threading

import unicodedata

from flask import Flask, request
import requests


bot = telebot.TeleBot(config.TOKEN)

# –î–∞–Ω–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
data_users_id = set()

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
# [----------------------------------------------]
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π "–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è"
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
WAITING_FOR_TRANSLATION = "WAITING_FOR_TRANSLATION"

# [----------------------------------------------]
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
WAITING_FOR_ADD_WORD = "WAITING_FOR_ADD_WORD"
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
WAITING_FOR_ADD_TRANSLATION = "WAITING_FOR_ADD_TRANSLATION"
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
WAITING_FOR_ADD_CATEGORY = "WAITING_FOR_ADD_CATEGORY"

# [----------------------------------------------]
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ "–ù–∞–π—Ç–∏ —Å–ª–æ–≤–æ"
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–æ–≤–∞ –∏–ª–∏ —á–∞—Å—Ç–∏ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
WAITING_FOR_PARTIAL_WORD = "WAITING_FOR_PARTIAL_WORD"
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞, –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 
WAITING_FOR_EDIT_CHOICE = "WAITING_FOR_EDIT_CHOICE"
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞
WAITING_FOR_NEW_WORD = "WAITING_FOR_NEW_WORD"
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
WAITING_FOR_NEW_TRANSLATION = "WAITING_FOR_NEW_TRANSLATION"
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
WAITING_FOR_NEW_CATEGORY = "WAITING_FOR_NEW_CATEGORY"

# [----------------------------------------------]
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞—Ä—å"
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤—ã–≤–æ–¥–∞ —Å–ª–æ–≤–∞—Ä—è –≤ –Ω—É–∂–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ
PRINT_ALL_WORDS = "PRINT_ALL_WORDS"

# [----------------------------------------------]
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ "–£–¥–∞–ª–∏—Ç—å"
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞, –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
WAITING_FOR_DELETE_FULL_WORD_TRANSLATION_CATEGORY = "WAITING_FOR_DELETE_FULL_WORD_TRANSLATION_CATEGORY"


# –°–∏–º–≤–æ–ª—ã
ALLOWED_SYMBOLS = "/" + "," + "." + "" + " " + "-" + "~" + "@" + "#" + "%" + "&" + "*" + "+" + "()" + "[]" + "{}"
# [----------------------------------------------]
# –ë—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞
RUSSIAN_LETTERS = "–π—Ü—É–µ—ë–Ω–≥—à—â–∑—Ö—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å—ä–±—é–∫" + ALLOWED_SYMBOLS

# [----------------------------------------------]
# –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–≤
koreanList              = []
russianList             = []
categoryList            = []

# –ö–Ω–æ–ø–∫–∏
# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
btn_start_txt = "/start"
btn_stop_txt = "/stop"
btn_info_txt = "üó£Ô∏è /–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ"
btn_kor_rus_test_txt = "/–ü—Ä–æ–≤–µ—Ä—å –º–µ–Ω—è! (–∫–æ—Ä–µ–π—Å–∫–æ-—Ä—É—Å—Å–∫–∏–π)"
btn_random_ten_words_txt = "/üé≤ 10 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤"
btn_rus_kor_test_txt = "/–ü—Ä–æ–≤–µ—Ä—å –º–µ–Ω—è! (—Ä—É—Å—Å–∫–æ-–∫–æ—Ä–µ–π—Å–∫–∏–π)"
btn_add_word_txt = "/üñäÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"
btn_find_word_txt = "/üîç –ù–∞–π—Ç–∏ —Å–ª–æ–≤–æ"
btn_all_words_txt = "/üìñ–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞—Ä—å"


# –ö–Ω–æ–ø–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ "–ù–∞–π—Ç–∏ —Å–ª–æ–≤–æ"
btn_edit_word_txt = "/–ò–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–æ"
btn_edit_translation_txt = "/–ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥"
btn_edit_category_txt = "/–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
btn_delete_full_word_translation_category_txt = "/–£–¥–∞–ª–∏—Ç—å"


# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π "–ò–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–æ", "–ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥" –∏ "–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é" 
btn_back_for_find_word_functions_txt = "/–ù–∞–∑–∞–¥"


# –ö–Ω–æ–ø–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ "–£–¥–∞–ª–∏—Ç—å"
btn_delete_word_yes_txt = "/–î–∞"
btn_delete_word_no_txt = "/–ù–µ—Ç"


# –ö–Ω–æ–ø–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞—Ä—å"
btn_all_words_korean_sort_txt = "/üá∞üá∑–ü–æ –∫–æ—Ä–µ–π—Å–∫–æ–º—É –∞–ª—Ñ–∞–≤–∏—Ç—É"
btn_all_words_russian_sort_txt = "/üá∑üá∫–ü–æ —Ä—É—Å—Å–∫–æ–º—É –∞–ª—Ñ–∞–≤–∏—Ç—É"
btn_all_words_category_sort_txt = "/üìö–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ª—é–±—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
btn_cancel_txt = "/–û—Ç–º–µ–Ω–∞"


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞
btn_restart_russian_txt = "/–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å"
btn_restart_english_txt = "/Restart"


# –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
btn_category_society_txt            = "–û–±—â–µ—Å—Ç–≤–æ"
btn_category_objects_txt            = "–ü—Ä–µ–¥–º–µ—Ç—ã"
btn_category_animals_txt            = "–ñ–∏–≤–æ—Ç–Ω—ã–µ"
btn_category_plants_txt             = "–†–∞—Å—Ç–µ–Ω–∏—è"
btn_category_education_txt          = "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"
btn_category_culture_txt            = "–ö—É–ª—å—Ç—É—Ä–∞"
btn_category_food_txt               = "–ï–¥–∞"
btn_category_religion_txt           = "–†–µ–ª–∏–≥–∏—è"

# –î–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
btn_set_russian_language_txt        = "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫"
btn_set_english_language_txt        = "English language"

# –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã —É–ø–æ—Ä—è–¥–æ—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
list_categories = [btn_category_society_txt, btn_category_objects_txt, btn_category_animals_txt, btn_category_plants_txt, btn_category_education_txt, btn_category_culture_txt, btn_category_food_txt, btn_category_religion_txt]


##########################################################################################
# –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ –ë–î
def koreanList_instance():
    conn = sqlite3.connect('voc.db')
    cursor = conn.cursor()
    cursor.execute("SELECT korean FROM words")
    rows = cursor.fetchall()

    for row in rows:
        koreanList.append(row[0])

    conn.close()


def russianList_instance():
    conn = sqlite3.connect('voc.db')
    # –¢–µ–ø–µ—Ä—å –∑–∞—Ä–∞–Ω–µ–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    for i in range(len(koreanList)):
        cursor = conn.cursor()
        cursor.execute("SELECT russian FROM words WHERE korean = ?", (koreanList[i],))
        result = cursor.fetchone()
        russianList.append(result[0])
    conn.close()


def categoryList_instance():
    conn = sqlite3.connect('voc.db')
    # –¢–µ–ø–µ—Ä—å –∑–∞—Ä–∞–Ω–µ–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    for i in range(len(koreanList)):
        cursor = conn.cursor()
        cursor.execute("SELECT category FROM words WHERE korean = ?", (koreanList[i],))
        result = cursor.fetchone()
        categoryList.append(result[0])
    conn.close()


##########################################################################################
# –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_user_id():
    conn = sqlite3.connect('voc.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users")
    rows = cursor.fetchall()

    for row in rows:
        data_users_id.add(row[0])
    conn.close()


# –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
# –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ —Å–ª–æ–≤–∞–º–∏
koreanList_instance()
russianList_instance()
categoryList_instance()


# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
def lists_updates():
    koreanList.clear()
    russianList.clear()
    koreanList_instance()
    russianList_instance()


# –ü–æ–ª—É—á–∞–µ–º user_id
get_user_id()


##########################################################################################
# –§—É–Ω–∫—Ü–∏–∏, –ø–æ–º–æ–≥–∞—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–æ–¥–∏—Ç—å —Å–ª–æ–≤–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —è–∑—ã–∫–µ
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–∏—Å–∞–Ω–æ –ª–∏ —Å–ª–æ–≤–æ —Ä—É—Å—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏
def hasRussianLetters(text):
    return all(char.lower() in RUSSIAN_LETTERS for char in text)


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–∏—Å–∞–Ω–æ –ª–∏ —Å–ª–æ–≤–æ –∫–æ—Ä–µ–π—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏
def hasKoreanLetters(text):
    for char in text:
        if 'HANGUL' not in unicodedata.name(char) and not(char in ALLOWED_SYMBOLS):
            return False
    return True


##########################################################################################
# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
def save_user_data(id, first_name, last_name):
    conn = sqlite3.connect('voc.db')
    cursor = conn.cursor()

    cursor.execute('''
    INSERT OR REPLACE INTO users (id, first_name, last_name)
    VALUES (?, ?, ?)
    ''', (id, first_name, last_name))

    conn.commit()
    conn.close()


# –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
@bot.message_handler(func=lambda message: message.text.lower() == "/–æ—Ç–º–µ–Ω–∞")
def cancel_function(message):
    user_id = message.chat.id
        
    if user_states:
        if user_states[user_id] is not None:
            del user_states[user_id]
        
    bot.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=create_main_menu())

# –í—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —è–∑—ã–∫–∞
def create_main_lang_choice_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn_set_russian_language = types.KeyboardButton(btn_set_russian_language_txt)
    btn_set_english_language = types.KeyboardButton(btn_set_english_language_txt)

    markup.add(btn_set_russian_language, btn_set_english_language)
    
    return markup

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn_start = types.KeyboardButton(btn_start_txt)
    btn_stop = types.KeyboardButton(btn_stop_txt)
    btn_info = types.KeyboardButton(btn_info_txt)
    btn_kor_rus_test = types.KeyboardButton(btn_kor_rus_test_txt)
    btn_random_ten_words = types.KeyboardButton(btn_random_ten_words_txt)
    btn_rus_kor_test = types.KeyboardButton(btn_rus_kor_test_txt)
    btn_add_word = types.KeyboardButton(btn_add_word_txt)
    btn_find_word = types.KeyboardButton(btn_find_word_txt)
    btn_all_words = types.KeyboardButton(btn_all_words_txt)

    markup.add(btn_start, btn_info, btn_kor_rus_test, btn_rus_kor_test, btn_random_ten_words, btn_all_words, btn_add_word, btn_find_word)
    
    return markup


##########################################################################################
# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞
@bot.message_handler(func=lambda message: message.text.lower() == btn_restart_russian_txt.lower() or message.text.lower() == btn_restart_english_txt.lower())
def restart(message):
    user_id = message.chat.id
    if user_states:
        if user_states[user_id] is not None:
            del user_states[user_id]
    
    get_user_id()
    lists_updates()
    
    bot.send_message(user_id, "–§—É—Ñ...–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –í—ã –º–µ–Ω—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª–∏, –∞ —Ç–æ —è, –≤–∏–¥–∏–º–æ, –ø–æ–ª–æ–º–∞–ª—Å—è...", reply_markup=create_main_menu())


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
def create_restart_button():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_restart = types.KeyboardButton(btn_restart_russian_txt)

    markup.add(btn_restart)

    return markup


##########################################################################################
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞–∑–∞–¥
# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞–∑–∞–¥
def create_edit_choice_buttons():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_edit_word = types.KeyboardButton(btn_edit_word_txt)
    btn_edit_translation = types.KeyboardButton(btn_edit_translation_txt)
    btn_edit_category = types.KeyboardButton(btn_edit_category_txt)
    btn_delete_full_word_translation_category = types.KeyboardButton(btn_delete_full_word_translation_category_txt)
    btn_cancel = types.KeyboardButton(btn_cancel_txt)
    markup.add(btn_edit_word, btn_edit_translation, btn_edit_category, btn_delete_full_word_translation_category, btn_cancel)

    return markup


@bot.message_handler(func=lambda message: message.text.lower() == btn_back_for_find_word_functions_txt.lower())
def btn_back_for_find_word_functions(message):
    user_id = message.chat.id
    
    if user_states:
        if user_states[user_id] is not None:
            user_states[user_id]["state"] = WAITING_FOR_EDIT_CHOICE

    bot.send_message(user_id, "–û–∫. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥.", reply_markup=create_edit_choice_buttons())
    

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞–∑–∞–¥
def create_back_button():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_back = types.KeyboardButton(btn_back_for_find_word_functions_txt)

    markup.add(btn_back)
    
    return markup


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
def create_confirmation_for_detete_buttons():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn_delete_word_yes = types.KeyboardButton(btn_delete_word_yes_txt)
    btn_delete_word_no = types.KeyboardButton(btn_delete_word_no_txt)
    markup.add(btn_delete_word_yes, btn_delete_word_no)

    return markup

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ /stop
def create_stop_button():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn_stop = types.KeyboardButton(btn_stop_txt)

    markup.add(btn_stop)

    return markup

##########################################################################################
# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –¢–æ—á–∫–∞ –æ—Ç—Å—á–µ—Ç–∞ :)
@bot.message_handler(commands=['start'])
def start(message):
    try:
        user_id = message.chat.id
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]

        sticker = open('res/kpopHi.webp', 'rb')
        bot.send_sticker(user_id, sticker)

        bot.send_message(user_id, "üëãüèª –ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n <b>–Ø - –í–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∫–æ—Ä–µ–π—Å–∫–æ–º—É —è–∑—ã–∫—É</b>. –Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –≤ –∑–∞—É—á–∏–≤–∞–Ω–∏–∏ –∫–æ—Ä–µ–π—Å–∫–∏—Ö —Å–ª–æ–≤ ü§ì.".format(message.from_user), parse_mode='html', reply_markup=create_main_menu())
        bot.send_message(user_id, "<b>{0.first_name}</b>, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>{1}</b>, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É –í–∞–º –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –æ —Å–µ–±–µ –∏ –æ —Ç–æ–º, —á—Ç–æ —è —É–º–µ—é.".format(message.from_user, btn_info_txt),parse_mode='html')

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —á–µ—Ä–µ–∑ –≥–æ—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
        save_user_data(
            id                  = message.chat.id,
            first_name          = message.from_user.first_name,
            last_name           = message.from_user.last_name,
        )
    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]

##########################################################################################
# –ó–¥–µ—Å—å —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@bot.message_handler(func=lambda message: message.text.lower() == btn_add_word_txt.lower())
def add_word(message):
    try:
        user_id = message.chat.id
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]

        user_states[user_id] = {"state": WAITING_FOR_ADD_WORD}

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn_cancel = types.KeyboardButton(btn_cancel_txt)
        markup.add(btn_cancel)

        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:", reply_markup=markup)
    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get("state") == WAITING_FOR_ADD_WORD)
def handle_word_input(message):
    try:
        user_id = message.chat.id
        if user_states:
            if user_states[user_id] is not None:
                user_states[user_id]["word"] = message.text
                user_states[user_id]["state"] = WAITING_FOR_ADD_TRANSLATION

                # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–æ –≤ –ë–î
                word_check = ""

                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                btn_cancel = types.KeyboardButton(btn_cancel_txt)
                markup.add(btn_cancel)
                
                conn = sqlite3.connect('voc.db')
                cursor = conn.cursor()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–æ –≤ –ë–î (–∏—â–µ–º –ª–∏–±–æ –ø–æ —Ä—É—Å—Å–∫–æ–º—É, –ª–∏–±–æ –ø–æ –∫–æ—Ä–µ–π—Å–∫–æ–º—É)
                if hasRussianLetters(user_states[user_id]["word"]):
                    if not (user_states[user_id]["word"].startswith('/')):
                        cursor.execute("SELECT russian FROM words WHERE russian = ?", (user_states[user_id]["word"],))
                    else:
                        bot.send_message(user_id, "–°–ª–æ–≤–æ/–í—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ '/'.")
                        user_states[user_id]["state"] = WAITING_FOR_ADD_WORD
                        return
                        
                elif hasKoreanLetters(user_states[user_id]["word"]):
                    if not (user_states[user_id]["word"].startswith('/')):
                        cursor.execute("SELECT korean FROM words WHERE korean = ?", (user_states[user_id]["word"],))
                    else:
                        bot.send_message(user_id, "–°–ª–æ–≤–æ/–í—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ '/'.")
                        user_states[user_id]["state"] = WAITING_FOR_ADD_WORD
                        return
                else:
                    bot.send_message(user_id, "–ü–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏–±–æ –Ω–∞ –∫–æ—Ä–µ–π—Å–∫–æ–º —è–∑—ã–∫–µ, –ª–∏–±–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –î—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ —è –Ω–µ –∑–Ω–∞—é üòÅ")
                    user_states[user_id]["state"] = WAITING_FOR_ADD_WORD

                result = cursor.fetchone()  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                conn.close()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω–æ –ª–∏ —Å–ª–æ–≤–æ –≤ –ë–î
                if result is None:  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                    if hasKoreanLetters(user_states[user_id]["word"]):
                        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ <b>—Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ</b>:", parse_mode='html', reply_markup=markup)
                    elif hasRussianLetters(user_states[user_id]["word"]):
                        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ <b>–∫–æ—Ä–µ–π—Å–∫–æ–º —è–∑—ã–∫–µ</b>:", parse_mode='html', reply_markup=markup)
                else:
                    user_states[user_id]["state"] = WAITING_FOR_ADD_WORD
                    bot.send_message(user_id, "–¢–∞–∫–æ–µ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ.")
        else:
            bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
            if user_states:
                if user_states[user_id] is not None:
                    del user_states[user_id]

    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    finally:
        conn.close()

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get("state") == WAITING_FOR_ADD_TRANSLATION)
def handle_translation_input(message):
    try:
        user_id = message.chat.id
        if user_states:
            if user_states[user_id] is not None:
                user_states[user_id]["translation"] = message.text

                conn = sqlite3.connect('voc.db')
                cursor = conn.cursor()
                if (hasRussianLetters(user_states[user_id]["translation"])):
                    if not (user_states[user_id]["translation"].startswith('/')):
                        cursor.execute("SELECT russian FROM words WHERE russian = ?", (user_states[user_id]["translation"],))
                    else:
                        bot.send_message(user_id, "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ '/'.")
                        user_states[user_id]["state"] = WAITING_FOR_ADD_TRANSLATION
                        return      
                elif (hasKoreanLetters(user_states[user_id]["translation"])):
                    if not (user_states[user_id]["translation"].startswith('/')):
                        cursor.execute("SELECT korean FROM words WHERE korean = ?", (user_states[user_id]["translation"],))
                    else:
                        bot.send_message(user_id, "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ '/'.")
                        user_states[user_id]["state"] = WAITING_FOR_ADD_TRANSLATION
                        return 
                else:
                    bot.send_message(user_id, "–ü–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏–±–æ –Ω–∞ –∫–æ—Ä–µ–π—Å–∫–æ–º —è–∑—ã–∫–µ, –ª–∏–±–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –î—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ —è –Ω–µ –∑–Ω–∞—é üòÅ.")
                    user_states[user_id]["state"] = WAITING_FOR_ADD_TRANSLATION
                    return
                

                result = cursor.fetchone()  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                conn.close()

                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                btn_society = types.KeyboardButton(btn_category_society_txt)
                btn_education = types.KeyboardButton(btn_category_education_txt)
                btn_culture = types.KeyboardButton(btn_category_culture_txt)
                btn_religion = types.KeyboardButton(btn_category_religion_txt)
                btn_animals = types.KeyboardButton(btn_category_animals_txt)
                btn_plants = types.KeyboardButton(btn_category_plants_txt)
                btn_objects = types.KeyboardButton(btn_category_objects_txt)
                btn_food = types.KeyboardButton(btn_category_food_txt)
                btn_cancel = types.KeyboardButton(btn_cancel_txt)

                markup.add(btn_society)
                markup.add(btn_education)
                markup.add(btn_culture)
                markup.add(btn_religion)
                markup.add(btn_animals)
                markup.add(btn_plants)
                markup.add(btn_objects)
                markup.add(btn_food)
                markup.add(btn_cancel)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω–æ –ª–∏ —Å–ª–æ–≤–æ –≤ –ë–î
                if result is None:  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=markup)
                    user_states[user_id]["state"] = WAITING_FOR_ADD_CATEGORY
                else:
                    user_states[user_id]["state"] = WAITING_FOR_ADD_TRANSLATION
                    bot.send_message(user_id, "–¢–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ.")
        else:
            bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
            if user_states:
                if user_states[user_id] is not None:
                    del user_states[user_id]
    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    finally:
        conn.close()

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get("state") == WAITING_FOR_ADD_CATEGORY)
def handle_category_input(message):
    try:
        user_id = message.chat.id
        if user_states:
            if user_states[user_id] is not None:
                category = message.text
                word = user_states[user_id]["word"]
                translation = user_states[user_id]["translation"]
                
                if not (category in list_categories):
                    bot.send_message(user_id, "–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
                else:
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    conn = sqlite3.connect('voc.db')
                    cursor = conn.cursor()
                    if (hasKoreanLetters(user_states[user_id]["word"])) and (hasRussianLetters(user_states[user_id]["translation"])):
                        cursor.execute("INSERT INTO words (korean, russian, category) VALUES (?, ?, ?)", (word, translation.lower(), category))
                    elif (hasRussianLetters(user_states[user_id]["word"])) and (hasKoreanLetters(user_states[user_id]["translation"])):
                        cursor.execute("INSERT INTO words (russian, korean, category) VALUES (?, ?, ?)", (word.lower(), translation, category))
                    else:
                        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.")
                        if user_states:
                            if user_states[user_id] is not None:
                                del user_states[user_id]
                        return

                    conn.commit()

                    bot.send_message(user_id, f"–°–ª–æ–≤–æ/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ <b>'{word}'</b> —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º <b>'{translation}'</b> –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>'{category}'</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=create_main_menu(), parse_mode='html')
                    if user_states:
                        if user_states[user_id] is not None:
                            del user_states[user_id]
                    conn.close()
                    lists_updates()
        else:
            bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
            if user_states:
                if user_states[user_id] is not None:
                    del user_states[user_id]
    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    finally:
        conn.close()

##########################################################################################
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å–ª–æ–≤–∞
@bot.message_handler(func=lambda message: message.text.lower() == btn_find_word_txt.lower())
def find_word(message):
    try:
        user_id = message.chat.id
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]

        user_states[user_id] = {"state": WAITING_FOR_PARTIAL_WORD}

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn_cancel = types.KeyboardButton(btn_cancel_txt)
        markup.add(btn_cancel)
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç—å —Å–ª–æ–≤–∞/–≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:", reply_markup=markup)
    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get("state") == WAITING_FOR_PARTIAL_WORD)
def handle_partial_word_input(message):
    try:
        user_id = message.chat.id
        if user_states:
            if user_states[user_id] is not None:
                partial_word = message.text
            
                # –ü–æ–∏—Å–∫ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é —á–∞—Å—Ç—å
                conn = sqlite3.connect('voc.db')
                cursor = conn.cursor()
                cursor.execute("SELECT russian FROM words WHERE russian LIKE ? or russian LIKE ? or russian LIKE ? or russian LIKE ?", ('%' + partial_word + '%', '%' + partial_word.capitalize() + '%', '%' + partial_word.upper() + '%', '%' + partial_word.lower() + '%', ))
                results = cursor.fetchall()
                conn.close()
                if results:
                    markup = types.InlineKeyboardMarkup()
                    for result in results:
                        word = result[0]
                        markup.add(types.InlineKeyboardButton(text=word, callback_data=f"edit_{word}"))

                    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
                else:
                    conn = sqlite3.connect('voc.db')
                    cursor = conn.cursor()
                    cursor.execute("SELECT korean FROM words WHERE korean LIKE ?", ('%' + partial_word + '%',))
                    results = cursor.fetchall()
                    if results:
                        markup = types.InlineKeyboardMarkup()
                        for result in results:
                            word = result[0]
                            markup.add(types.InlineKeyboardButton(text=word, callback_data=f"edit_{word}"))

                        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
                    else:
                        bot.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ–≤/–≤—ã—Ä–∞–∂–µ–Ω–∏–π —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é —á–∞—Å—Ç—å —Å–ª–æ–≤–∞/–≤—ã—Ä–∞–∂–µ–Ω–∏—è.")
                    conn.close()
        else:
            bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
            if user_states:
                if user_states[user_id] is not None:
                    del user_states[user_id]
    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    finally:
        conn.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_"))
def handle_word_selection(call):
    try:
        user_id = call.message.chat.id
        if user_states:
            if user_states[user_id] is not None:
                selected_word = call.data[len("edit_"):]
            
                translation_for_selected_word = ""
                category_for_selected_word = ""

                user_states[user_id] = {
                    "state": WAITING_FOR_EDIT_CHOICE,
                    "current_word": selected_word
                }

                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton(btn_edit_word_txt)
                item2 = types.KeyboardButton(btn_edit_translation_txt)
                item3 = types.KeyboardButton(btn_edit_category_txt)
                item4 = types.KeyboardButton(btn_delete_full_word_translation_category_txt)
                item5 = types.KeyboardButton(btn_cancel_txt)
                markup.add(item1, item2, item3, item4, item5)
            
                # –ù–∞–¥–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ - –ø–µ—Ä–µ–≤–æ–¥ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –í—Å–µ —ç—Ç–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
                # –ó–¥–µ—Å—å –æ—à–∏–±–∫–∞. –ù–∞–¥–æ –Ω–∞–π—Ç–∏ –µ–µ –∏ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å :(
                if hasRussianLetters(user_states[user_id]["current_word"]):
                    conn = sqlite3.connect('voc.db')
                    cursor = conn.cursor()
                    cursor.execute("SELECT korean, category FROM words WHERE russian=?", (user_states[user_id]["current_word"],))
                    result = cursor.fetchone()
                    translation_for_selected_word = result[0]
                    category_for_selected_word = result[1]
                    conn.close()

                elif hasKoreanLetters(user_states[user_id]["current_word"]):
                    conn = sqlite3.connect('voc.db')
                    cursor = conn.cursor()
                    cursor.execute("SELECT russian, category FROM words WHERE korean=?", (user_states[user_id]["current_word"],))
                    result = cursor.fetchone()
                    translation_for_selected_word = result[0]
                    category_for_selected_word = result[1]
                    conn.close()

                user_states[user_id]["translation"] = translation_for_selected_word
                user_states[user_id]["category"] = category_for_selected_word

                bot.send_message(user_id, "[–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è]" + "\n" + "–°–ª–æ–≤–æ/–í—ã—Ä–∞–∂–µ–Ω–∏–µ: " + "<b>" + user_states[user_id]["current_word"] + "</b>" + "\n" + "–ü–µ—Ä–µ–≤–æ–¥: " + "<b>" + translation_for_selected_word + "</b>" + "\n" + "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + "<b>" + category_for_selected_word + "</b>", parse_mode='html')
                bot.send_message(user_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–æ–≤–æ/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {selected_word}. –ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å –Ω–∏–º —Å–¥–µ–ª–∞—Ç—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)
        else:
            bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
            if user_states:
                if user_states[user_id] is not None:
                    del user_states[user_id]
    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    finally:
        conn.close()


##########################################################################################
# –§—É–Ω–∫—Ü–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–ª–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get("state") == WAITING_FOR_EDIT_CHOICE)
def handle_edit_choice(message):
    try:
        user_id = message.chat.id
        if user_states:
            if user_states[user_id] is not None:
                choice = message.text.lower()

                if choice == btn_edit_word_txt.lower():
                    user_states[user_id]["state"] = WAITING_FOR_NEW_WORD
                    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>—Å–ª–æ–≤–æ/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ</b>:", reply_markup=create_back_button(), parse_mode='html')
                elif choice == btn_edit_translation_txt.lower():
                    user_states[user_id]["state"] = WAITING_FOR_NEW_TRANSLATION
                    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>–ø–µ—Ä–µ–≤–æ–¥</b>:", reply_markup=create_back_button(), parse_mode='html')
                elif choice == btn_edit_category_txt.lower():
                    user_states[user_id]["state"] = WAITING_FOR_NEW_CATEGORY
                    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é <b>–∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>:", reply_markup=create_back_button(), parse_mode='html')
                elif choice == btn_delete_full_word_translation_category_txt.lower():
                    user_states[user_id]["state"] = WAITING_FOR_DELETE_FULL_WORD_TRANSLATION_CATEGORY
                    bot.send_message(user_id, "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å " + "<b>" + user_states[user_id]["current_word"] + "</b>" + " - " + "<b>" + user_states[user_id]["translation"] + "</b>" + "{üìö–ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + "[" + "<b>" + user_states[user_id]["category"] + "</b>" + "]}" + "ü§î?", reply_markup=create_confirmation_for_detete_buttons(), parse_mode='html')
                    # create_confirmation_for_detete_buttons
                elif choice == btn_cancel_txt.lower():
                    pass # –ú–æ–∂–Ω–æ –±—ã–ª–æ —ç—Ç–æ –Ω–µ –¥–µ–ª–∞—Ç—å —Ç–∞–∫, –∫–∞–∫ –∫–Ω–æ–ø–∫–∞ —Å–∞–º–∞ –ø–æ —Å–µ–±–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç.
                else:
                    bot.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∑–¥–µ—Å—å –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ üòÅ.")
                    if user_states:
                        if user_states[user_id] is not None:
                            del user_states[user_id]
        else:
            bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
            if user_states:
                if user_states[user_id] is not None:
                    del user_states[user_id]
    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
# –ú–µ–Ω—è–µ–º –Ω–∞ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get("state") == WAITING_FOR_NEW_WORD)
def handle_new_word_input(message):
    try:
        user_id = message.chat.id
        if user_states:
            if user_states[user_id] is not None:
                new_word = message.text
                current_word = user_states[user_id]["current_word"]

                conn = sqlite3.connect('voc.db')
                cursor = conn.cursor()
                if hasKoreanLetters(current_word):
                    if hasKoreanLetters(new_word):
                        if not (new_word.startswith('/')):
                            cursor.execute("SELECT korean FROM words WHERE korean = ? ", (new_word,))
                            result = cursor.fetchone()
                            if result is None:
                                cursor.execute("UPDATE words SET korean=? WHERE korean=?", (new_word, current_word))
                                bot.send_message(user_id, f"–°–ª–æ–≤–æ/–í—ã—Ä–∞–∂–µ–Ω–∏–µ '{current_word}' —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_word}'!")
                                user_states[user_id]["state"] = WAITING_FOR_EDIT_CHOICE
                                conn.commit()
                                user_states[user_id]["current_word"] = new_word
                                conn.close()
                                
                                lists_updates()
                            else:
                                bot.send_message(user_id, "–¢–∞–∫–æ–µ —Å–ª–æ–≤–æ/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ üôÇ.")
                                user_states[user_id]["state"] = WAITING_FOR_NEW_WORD
                                return
                        else:
                            bot.send_message(user_id, "<b>–°–ª–æ–≤–æ/–í—ã—Ä–∞–∂–µ–Ω–∏–µ</b> –Ω–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ '/'.", parse_mode='html')
                            user_states[user_id]["state"] = WAITING_FOR_NEW_WORD
                            return
                    else:
                        bot.send_message(user_id, "–¢–∞–∫ –∫–∞–∫ —Å–ª–æ–≤–æ/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ '<b>" + current_word + "</b>' –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ –Ω–∞ –∫–æ—Ä–µ–π—Å–∫–æ–º —è–∑—ã–∫–µ, —Ç–æ —Å–ª–æ–≤–æ/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å —Ç–æ–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –∫–æ—Ä–µ–π—Å–∫–æ–º.", parse_mode='html')
                        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑ –Ω–∞ –∫–∞–∫–æ–µ —Å–ª–æ–≤–æ/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å üòâ.")
                        conn.close()
                        return
                elif hasRussianLetters(current_word):
                    if hasRussianLetters(new_word):
                        if not (new_word.startswith('/')):
                            cursor.execute("SELECT russian FROM words WHERE russian = ? ", (new_word,))
                            result = cursor.fetchone()
                            if result is None:
                                cursor.execute("UPDATE words SET russian=? WHERE russian=?", (new_word.lower(), current_word.lower()))
                                bot.send_message(user_id, f"–°–ª–æ–≤–æ '{current_word}' —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_word}'!")
                                user_states[user_id]["state"] = WAITING_FOR_EDIT_CHOICE
                                conn.commit()
                                user_states[user_id]["current_word"] = new_word
                                conn.close()

                                lists_updates()
                            else:
                                bot.send_message(user_id, "–¢–∞–∫–æ–µ —Å–ª–æ–≤–æ/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ.")
                                user_states[user_id]["state"] = WAITING_FOR_NEW_WORD
                                return
                        else:
                            bot.send_message(user_id, "<b>–°–ª–æ–≤–æ/–í—ã—Ä–∞–∂–µ–Ω–∏–µ</b> –Ω–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ '/'.", parse_mode='html')
                            user_states[user_id]["state"] = WAITING_FOR_NEW_WORD
                            return
                    else:
                        bot.send_message(user_id, "–¢–∞–∫ –∫–∞–∫ —Å–ª–æ–≤–æ/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ '<b>" + current_word + "</b>' –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Ç–æ —Å–ª–æ–≤–æ/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å —Ç–æ–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.", parse_mode='html')
                        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑ –Ω–∞ –∫–∞–∫–æ–µ —Å–ª–æ–≤–æ/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å üòâ.")
                        conn.close()
                        return
                else:
                    bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
                    if user_states:
                        if user_states[user_id] is not None:
                            del user_states[user_id]
        else:
            bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
            if user_states:
                if user_states[user_id] is not None:
                    del user_states[user_id]
    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    finally:
        conn.close()

# –ú–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞
@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get("state") == WAITING_FOR_NEW_TRANSLATION)
def handle_new_translation_input(message):
    try:
        user_id = message.chat.id
        if user_states:
            if user_states[user_id] is not None:
                new_translation = message.text
                current_word = user_states[user_id]["current_word"]
            
                conn = sqlite3.connect('voc.db')
                cursor = conn.cursor()
                if hasKoreanLetters(current_word):
                    if hasRussianLetters(new_translation):
                        if not (new_translation.startswith('/')):
                            cursor.execute("SELECT russian FROM words WHERE russian = ?", (new_translation.lower(),))
                            result = cursor.fetchone()
                            if result is None:
                                cursor.execute("UPDATE words SET russian=? WHERE korean=?", (new_translation, current_word))
                                bot.send_message(user_id, f"–ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞ '{current_word}' —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_translation}'!")
                                user_states[user_id]["state"] = WAITING_FOR_EDIT_CHOICE
                                conn.commit()
                                conn.close()

                                lists_updates()
                                user_states[user_id]["translation"] = new_translation
                            else:
                                bot.send_message(user_id, "–¢–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ.")
                                user_states[user_id]["state"] = WAITING_FOR_NEW_TRANSLATION
                                return
                        else:
                            bot.send_message(user_id, "<b>–ü–µ—Ä–µ–≤–æ–¥</b> –Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ '/'.", parse_mode='html')
                            user_states[user_id]["state"] = WAITING_FOR_NEW_TRANSLATION
                            return
                    else:
                        bot.send_message(user_id, "–¢–∞–∫ –∫–∞–∫ –ø–µ—Ä–µ–≤–æ–¥ '<b>" + user_states[user_id]["translation"] + "</b>' –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Ç–æ –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ —Ä—É—Å—Å–∫–æ–º.", parse_mode='html')
                        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑ –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞/–≤—ã—Ä–∞–∂–µ–Ω–∏—è '" + current_word + "' üòâ.")
                        conn.close()
                        return
                elif hasRussianLetters(current_word):
                    if hasKoreanLetters(new_translation):
                        if not(new_translation.startswith('/')):
                            cursor.execute("SELECT korean FROM words WHERE korean = ?", (new_translation,))
                            result = cursor.fetchone()
                            if result is None:
                                cursor.execute("UPDATE words SET korean=? WHERE russian=?", (new_translation, current_word.lower()))
                                bot.send_message(user_id, f"–ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞ '{current_word}' —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_translation}'!")
                                user_states[user_id]["state"] = WAITING_FOR_EDIT_CHOICE
                                conn.commit()
                                conn.close()

                                lists_updates()
                                user_states[user_id]["translation"] = new_translation
                            else:
                                bot.send_message(user_id, "–¢–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ.")
                                user_states[user_id]["state"] = WAITING_FOR_NEW_TRANSLATION
                                return
                        else:
                            bot.send_message(user_id, "<b>–ü–µ—Ä–µ–≤–æ–¥</b> –Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ '/'.", parse_mode='html')
                            user_states[user_id]["state"] = WAITING_FOR_NEW_TRANSLATION
                            return
                    else:
                        bot.send_message(user_id, "–¢–∞–∫ –∫–∞–∫ –ø–µ—Ä–µ–≤–æ–¥ '<b>" + user_states[user_id]["translation"] + "</b>' –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ –∫–æ—Ä–µ–π—Å–∫–æ–º —è–∑—ã–∫–µ, —Ç–æ –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ –∫–æ—Ä–µ–π—Å–∫–æ–º.", parse_mode='html')
                        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑ –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞/–≤—ã—Ä–∞–∂–µ–Ω–∏—è '" + current_word + "' üòâ.")
                        conn.close()
                        return
                else:
                    bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
                    if user_states:
                        if user_states[user_id] is not None:
                            del user_states[user_id]
        else:
            bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
            if user_states:
                if user_states[user_id] is not None:
                    del user_states[user_id]
    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    finally:
        conn.close()
# –ú–µ–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get("state") == WAITING_FOR_NEW_CATEGORY)
def handle_new_category_input(message):
    try:
        user_id = message.chat.id
        if user_states:
            if user_states[user_id] is not None:
                new_category = message.text
                current_word = user_states[user_id]["current_word"]
            
                conn = sqlite3.connect('voc.db')
                cursor = conn.cursor()
                if new_category in categoryList:
                    if hasRussianLetters(current_word):
                        cursor.execute("SELECT category FROM words WHERE russian = ?", (current_word,))
                    elif hasKoreanLetters(current_word):
                        cursor.execute("SELECT category FROM words WHERE korean = ?", (current_word,))
                    else:
                        bot.send_message(user_id, "–•–º–º–º...–°—Ç—Ä–∞–Ω–Ω–æ, –æ–±—ã—á–Ω–æ –¥–æ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞, —Ç–∞–∫–∞—è –æ—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É–∂–µ –∑–∞—Ä–∞–Ω–µ–µ...–ü–æ–∂–∞–ª—É—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–Ω—è:).", reply_markup=create_restart_button())
                        if user_states:
                            if user_states[user_id] is not None:
                                del user_states[user_id]
                    result = cursor.fetchone()
                    if result is not None:
                        if new_category == result[0]:
                            bot.send_message(user_id, "–°–ª–æ–≤–æ/–í—ã—Ä–∞–∂–µ–Ω–∏–µ " + current_word + " —É–∂–µ –∏–º–µ–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é " + new_category + "." + "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
                            user_states[user_id]["state"] = WAITING_FOR_NEW_CATEGORY
                        else:
                            cursor.execute("UPDATE words SET category=? WHERE korean=?", (new_category, current_word))
                            bot.send_message(user_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Å–ª–æ–≤–∞ '{current_word}' —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{new_category}'!")
                            conn.commit()
                            conn.close()
                            user_states[user_id]["category"] = new_category
                    else:
                        bot.send_message(user_id, "–•–º–º–º...–°—Ç—Ä–∞–Ω–Ω–æ, –æ–±—ã—á–Ω–æ –¥–æ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞, —Ç–∞–∫–∞—è –æ—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É–∂–µ –∑–∞—Ä–∞–Ω–µ–µ...–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–Ω—è:).", reply_markup=create_restart_button())
                        if user_states:
                            if user_states[user_id] is not None:
                                del user_states[user_id]
                else:
                    bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
                    if user_states:
                        if user_states[user_id] is not None:
                            del user_states[user_id]
        else:
            bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
            if user_states:
                if user_states[user_id] is not None:
                    del user_states[user_id]

    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    finally:
        conn.close()
##########################################################################################
# –§—É–Ω–∫—Ü–∏—è, —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞, –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get("state") == WAITING_FOR_DELETE_FULL_WORD_TRANSLATION_CATEGORY)
def handle_full_delete_word_translation_category_input(message):
    try:
        user_id = message.chat.id
        if user_states:
            if user_states[user_id] is not None:
                current_word = user_states[user_id]["current_word"]

                choice = message.text.lower()

                conn = sqlite3.connect('voc.db')
                cursor = conn.cursor()

                if choice == btn_delete_word_yes_txt.lower():
                    if hasRussianLetters(current_word):
                        cursor.execute("DELETE FROM words WHERE russian = ?", (current_word,))
                        conn.commit()
                        bot.send_message(user_id, "<b>" + user_states[user_id]["current_word"] + "</b>" + " - " + "<b>" + user_states[user_id]["translation"] + "</b>" + "{üìö–ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + "[" + "<b>" + user_states[user_id]["category"] + "</b>" + "]}" + " —É–¥–∞–ª–µ–Ω—ã.", reply_markup=create_main_menu(), parse_mode='html')
                        conn.close()
                        if user_states:
                            if user_states[user_id] is not None:
                                del user_states[user_id]
                    elif hasKoreanLetters(current_word):
                        cursor.execute("DELETE FROM words WHERE korean = ?", (current_word,))
                        conn.commit()
                        bot.send_message(user_id, "<b>" + user_states[user_id]["current_word"] + "</b>" + " - " + "<b>" + user_states[user_id]["translation"] + "</b>" + "{üìö–ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + "[" + "<b>" + user_states[user_id]["category"] + "</b>" + "]}" + " —É–¥–∞–ª–µ–Ω—ã.", reply_markup=create_main_menu(), parse_mode='html')
                        conn.close()
                        if user_states:
                            if user_states[user_id] is not None:
                                del user_states[user_id]
                    else:
                        bot.send_message(user_id, "–•–º–º–º...–°—Ç—Ä–∞–Ω–Ω–æ, –æ–±—ã—á–Ω–æ –¥–æ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞, —Ç–∞–∫–∞—è –æ—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É–∂–µ –∑–∞—Ä–∞–Ω–µ–µ...–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–Ω—è:).", reply_markup=create_restart_button())
                        if user_states:
                            if user_states[user_id] is not None:
                                del user_states[user_id]
                elif choice == btn_delete_word_no_txt.lower():
                    user_states[user_id]["state"] = WAITING_FOR_EDIT_CHOICE
                    bot.send_message(user_id, "–û–∫. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥.", reply_markup=create_edit_choice_buttons())
                else:
                    bot.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∑–¥–µ—Å—å –Ω–µ—Ç üòÇ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Ç–æ–≥–æ —á—Ç–æ –µ—Å—Ç—å üòÅ.")   
        else:
            bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
            if user_states:
                if user_states[user_id] is not None:
                    del user_states[user_id]
    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    finally:
        conn.close()

##########################################################################################
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ª—É—á–∞–Ω—ã—Ö 10 —Å–ª–æ–≤ –∏–∑ –ë–î
@bot.message_handler(func=lambda message: message.text.lower() == btn_random_ten_words_txt.lower())
def random_ten_words(message):
    try:
        user_id = message.chat.id

        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]

        bot.send_message(user_id, "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º. üòé –ñ–µ–ª–∞—é –í–∞–º —É–¥–∞—á–∏! üçÄ", reply_markup=create_stop_button())
        bot.send_message(user_id, "–ó–¥–µ—Å—å —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±—Ä–∞–Ω—ã 10 —Å–ª–æ–≤/–≤—ã—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∏ —Ç–∞–∫–∂–µ —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è üòâ.", reply_markup=create_stop_button())
    
        random_ten_combined_list = []
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
        combined_list = list(zip(koreanList, russianList))

        random.shuffle(combined_list)
        

        for i in range(10):
            random_ten_combined_list.append(combined_list[i])

        shuffled_koreanList, shuffled_russianList = zip(*random_ten_combined_list)
        
    
        user_states[user_id] = {
            "state": WAITING_FOR_TRANSLATION,
            "current_word_index": 0,
            "score": 0,
            "shuffled_koreanList": shuffled_koreanList,
            "shuffled_russianList": shuffled_russianList,
            "translation": "none"
        }

        # –†–µ–∞–ª–∏–∑—É–µ–º, —Ç–∞–∫:
        # –°–¥–µ–ª–∞–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Å–ª—É—á–∞—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—É–≥–∞–¥ –≤—ã–ø–∞–¥–µ—Ç –ª–∏–±–æ –∫–æ—Ä–µ–π—Å–∫–æ-—Ä—É—Å—Å–∫–∏–π, –ª–∏–±–æ —Ä—É—Å—Å–∫–æ-–∫–æ—Ä–µ–π—Å–∫–∏–π
        random_choice = random.randint(0,1)
        if (random_choice == 0):
            user_states[user_id]["translation"] = "korean_russian"
            send_question_korean_russian(user_id)
        else:
            user_states[user_id]["translation"] = "russian_korean"
            send_question_russian_korean(user_id)
    
    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]

##########################################################################################
# –ó–¥–µ—Å—å —Ñ—É–Ω–∫—Ü–∏—è STOP –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
@bot.message_handler(commands=['stop'])
def stop_quiz(message):
    try:
        user_id = message.chat.id
    
        if user_id in user_states:
            score = user_states[user_id]["score"]
            total_questions = len(user_states[user_id]["shuffled_koreanList"])
            bot.send_message(user_id, f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score}</b> –∏–∑ <b>{total_questions}</b>", reply_markup=create_main_menu(), parse_mode='html')

            percentage = (score / total_questions) * 100
            bot.send_message(user_id, "–í –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏: " + str(percentage) + " %")
 
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if percentage <= 20:  # 0% - 20% BAD
                sticker = open('res/kpopBad.webp', 'rb')
                bot.send_sticker(user_id, sticker)
                bot.send_message(user_id, "–ß–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è - –ø–ª–æ—Ö–æ. –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —Å—Ç–∞—Ä–∞—Ç—å—Å—è.")
            elif percentage <= 40:  # 21% - 40% BELOW AVERAGE
                sticker = open('res/kpopNotBad.webp', 'rb')
                bot.send_sticker(user_id, sticker)
                bot.send_message(user_id, "–ù–µ–ø–ª–æ—Ö–æ. –ù–æ –Ω–∞–¥–æ –±—ã—Ç—å —É—Å–µ—Ä–¥–Ω–µ–µ.") 
            elif percentage <= 60:  # 41% - 60% GOOD
                sticker = open('res/kpopGood.webp', 'rb')
                bot.send_sticker(user_id, sticker) 
                bot.send_message(user_id, "–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
            elif percentage <= 80:  # 61% - 80% VERY GOOD
                sticker = open('res/kpopVeryGood.webp', 'rb')
                bot.send_sticker(user_id, sticker)
                bot.send_message(user_id, "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!")
            else:  # 81% - 100% EXCELLENT
                sticker = open('res/kpopExcellent.webp', 'rb')
                bot.send_sticker(user_id, sticker)
                bot.send_message(user_id, "–°—É–ø–µ—Ä! –û—Ç–ª–∏—á–Ω–æ, –º–æ–ª–æ–¥–µ—Ü!")

            if user_states:
                if user_states[user_id] is not None:
                    del user_states[user_id]
        else:
            bot.send_message(user_id, "–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ —Ç–µ—Å—Ç. –ù–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä—å –º–µ–Ω—è!', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
##########################################################################################
# –ó–¥–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ—Ä–µ–π—Å–∫–æ-—Ä—É—Å—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
@bot.message_handler(func=lambda message: message.text.lower() == btn_kor_rus_test_txt.lower())
def start_quiz_korean_russian(message):
    try:
        user_id = message.chat.id

        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]

        bot.send_message(user_id, "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º. üòé –ñ–µ–ª–∞—é –í–∞–º —É–¥–∞—á–∏! üçÄ", reply_markup=create_stop_button())

        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
        combined_list = list(zip(koreanList, russianList))
        random.shuffle(combined_list)
        shuffled_koreanList, shuffled_russianList = zip(*combined_list)

        user_states[user_id] = {
            "state": WAITING_FOR_TRANSLATION,
            "current_word_index": 0,
            "score": 0,
            "shuffled_koreanList": shuffled_koreanList,
            "shuffled_russianList": shuffled_russianList,
            "translation": "korean_russian"
        }
        send_question_korean_russian(user_id)
    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]

def send_question_korean_russian(user_id):
    try:
        current_index = user_states[user_id]["current_word_index"]
        word = user_states[user_id]["shuffled_koreanList"][current_index]
        
        markup = types.InlineKeyboardMarkup()
        
        correct_translation = user_states[user_id]["shuffled_russianList"][current_index]
        possible_answers = [correct_translation]
        while len(possible_answers) < 4:
            random_translation = user_states[user_id]["shuffled_russianList"][(current_index + len(possible_answers)) % len(user_states[user_id]["shuffled_russianList"])]
            if random_translation not in possible_answers:
                possible_answers.append(random_translation)
        
        random.shuffle(possible_answers)
        
        for answer in possible_answers:
            markup.add(types.InlineKeyboardButton(answer, callback_data=answer))
        
        # –í—ã–≤–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫ –Ω–µ–º—É –∫–Ω–æ–ø–∫–∏ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
        bot.send_message(user_id, f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ: <b>{word}</b>" + " (" + str(user_states[user_id]["current_word_index"] + 1) + "/" + str(len(user_states[user_id]["shuffled_russianList"])) + ")", parse_mode='html', reply_markup=markup)
    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]

@bot.callback_query_handler(func=lambda call: user_states.get(call.message.chat.id, {}).get("translation") == "korean_russian")
def handle_answer_korean_russian(call):
    try:
        user_id = call.message.chat.id
        if user_states:
            if user_states[user_id] is not None:
                if (user_states[user_id]["translation"] == "korean_russian"):
                    if user_id in user_states and user_states[user_id]["state"] == WAITING_FOR_TRANSLATION:
                        user_translation = call.data
                        current_index = user_states[user_id]["current_word_index"]
                        correct_translation = user_states[user_id]["shuffled_russianList"][current_index]

                        if user_translation.strip().lower() == correct_translation.strip().lower():
                            bot.send_message(user_id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ")
                            user_states[user_id]["score"] += 1
                        else:
                            bot.send_message(user_id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! ‚ùå. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: <b>{correct_translation}</b>", parse_mode='html')

                        if current_index + 1 < len(user_states[user_id]["shuffled_koreanList"]):
                            user_states[user_id]["current_word_index"] += 1
                            send_question_korean_russian(user_id)
                        else:
                            total_questions = len(user_states[user_id]["shuffled_koreanList"])
                            score = user_states[user_id]["score"]
                            percentage = (score / total_questions) * 100

                            bot.send_message(user_id, f"–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ç–µ—Å—Ç! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score}</b> –∏–∑ <b>{len(user_states[user_id]['shuffled_koreanList'])}</b>", reply_markup=create_main_menu(), parse_mode='html')
                            bot.send_message(user_id, "–í –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏: " + str(percentage) + " %")
                            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                            if percentage <= 20:  # 0% - 20% BAD
                                sticker = open('res/kpopBad.webp', 'rb')
                                bot.send_sticker(user_id, sticker)
                                bot.send_message(user_id, "–ß–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è - –ø–ª–æ—Ö–æ. –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —Å—Ç–∞—Ä–∞—Ç—å—Å—è.")
                            elif percentage <= 40:  # 21% - 40% BELOW AVERAGE
                                sticker = open('res/kpopNotBad.webp', 'rb')
                                bot.send_sticker(user_id, sticker)
                                bot.send_message(user_id, "–ù–µ–ø–ª–æ—Ö–æ. –ù–æ –Ω–∞–¥–æ –±—ã—Ç—å —É—Å–µ—Ä–¥–Ω–µ–µ.") 
                            elif percentage <= 60:  # 41% - 60% GOOD
                                sticker = open('res/kpopGood.webp', 'rb')
                                bot.send_sticker(user_id, sticker) 
                                bot.send_message(user_id, "–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
                            elif percentage <= 80:  # 61% - 80% VERY GOOD
                                sticker = open('res/kpopVeryGood.webp', 'rb')
                                bot.send_sticker(user_id, sticker)
                                bot.send_message(user_id, "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!")
                            else:  # 81% - 100% EXCELLENT
                                sticker = open('res/kpopExcellent.webp', 'rb')
                                bot.send_sticker(user_id, sticker)
                                bot.send_message(user_id, "–°—É–ø–µ—Ä! –û—Ç–ª–∏—á–Ω–æ, –º–æ–ª–æ–¥–µ—Ü!")

                            if user_states:
                                if user_states[user_id] is not None:
                                    del user_states[user_id]
                else:
                    bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
                    if user_states:
                        if user_states[user_id] is not None:
                            del user_states[user_id]
        else:
            bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
            if user_states:
                if user_states[user_id] is not None:
                    del user_states[user_id]
    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]

# –†—É—Å—Å–∫–æ-–∫–æ—Ä–µ–π—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
@bot.message_handler(func=lambda message: message.text.lower() == btn_rus_kor_test_txt.lower())
def start_quiz_russian_korean(message):
    try:
        user_id = message.chat.id

        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
        
        bot.send_message(user_id, "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º. üòé –ñ–µ–ª–∞—é –í–∞–º —É–¥–∞—á–∏! üçÄ", reply_markup=create_stop_button())

        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
        combined_list = list(zip(russianList, koreanList))
        random.shuffle(combined_list)
        shuffled_russianList, shuffled_koreanList = zip(*combined_list)

        user_states[user_id] = {
            "state": WAITING_FOR_TRANSLATION,
            "current_word_index": 0,
            "score": 0,
            "shuffled_koreanList": shuffled_koreanList,
            "shuffled_russianList": shuffled_russianList,
            "translation": "russian_korean"
        }
        send_question_russian_korean(user_id)
    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
def send_question_russian_korean(user_id):
    try:
        current_index = user_states[user_id]["current_word_index"]
        word = user_states[user_id]["shuffled_russianList"][current_index]
        
        markup = types.InlineKeyboardMarkup()
        
        correct_translation = user_states[user_id]["shuffled_koreanList"][current_index]
        possible_answers = [correct_translation]
        while len(possible_answers) < 4:
            random_translation = user_states[user_id]["shuffled_koreanList"][(current_index + len(possible_answers)) % len(user_states[user_id]["shuffled_koreanList"])]
            if random_translation not in possible_answers:
                possible_answers.append(random_translation)
        
        random.shuffle(possible_answers)
        
        for answer in possible_answers:
            markup.add(types.InlineKeyboardButton(answer, callback_data=answer))
        
        # –í—ã–≤–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫ –Ω–µ–º—É –∫–Ω–æ–ø–∫–∏ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
        bot.send_message(user_id, f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ: <b>{word}</b>" + " (" + str(user_states[user_id]["current_word_index"] + 1) + "/" + str(len(user_states[user_id]["shuffled_koreanList"])) + ")", parse_mode='html', reply_markup=markup)
    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]

@bot.callback_query_handler(func=lambda call: user_states.get(call.message.chat.id, {}).get("translation") == "russian_korean")
def handle_answer_russian_korean(call):
    try:
        user_id = call.message.chat.id
        if user_states:
            if user_states[user_id] is not None:
                if (user_states[user_id]["translation"] == "russian_korean"):
                    if user_id in user_states and user_states[user_id]["state"] == WAITING_FOR_TRANSLATION:
                        user_translation = call.data
                        current_index = user_states[user_id]["current_word_index"]
                        correct_translation = user_states[user_id]["shuffled_koreanList"][current_index]

                        if user_translation.strip().lower() == correct_translation.strip().lower():
                            bot.send_message(user_id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ")
                            user_states[user_id]["score"] += 1
                        else:
                            bot.send_message(user_id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! ‚ùå. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: <b>{correct_translation}</b>", parse_mode='html')

                        if current_index + 1 < len(user_states[user_id]["shuffled_russianList"]):
                            user_states[user_id]["current_word_index"] += 1
                            send_question_russian_korean(user_id)
                        else:
                            total_questions = len(user_states[user_id]["shuffled_russianList"])
                            score = user_states[user_id]["score"]
                            percentage = (score / total_questions) * 100

                            bot.send_message(user_id, f"–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ç–µ—Å—Ç! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score}</b> –∏–∑ <b>{len(user_states[user_id]['shuffled_russianList'])}</b>", reply_markup=create_main_menu(), parse_mode='html')
                            bot.send_message(user_id, "–í –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏: " + str(percentage) + " %")
                            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                            if percentage <= 20:  # 0% - 20% BAD
                                sticker = open('res/kpopBad.webp', 'rb')
                                bot.send_sticker(user_id, sticker)
                                bot.send_message(user_id, "–ß–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è - –ø–ª–æ—Ö–æ. –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —Å—Ç–∞—Ä–∞—Ç—å—Å—è.")
                            elif percentage <= 40:  # 21% - 40% BELOW AVERAGE
                                sticker = open('res/kpopNotBad.webp', 'rb')
                                bot.send_sticker(user_id, sticker)
                                bot.send_message(user_id, "–ù–µ–ø–ª–æ—Ö–æ. –ù–æ –Ω–∞–¥–æ –±—ã—Ç—å —É—Å–µ—Ä–¥–Ω–µ–µ.") 
                            elif percentage <= 60:  # 41% - 60% GOOD
                                sticker = open('res/kpopGood.webp', 'rb')
                                bot.send_sticker(user_id, sticker) 
                                bot.send_message(user_id, "–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
                            elif percentage <= 80:  # 61% - 80% VERY GOOD
                                sticker = open('res/kpopVeryGood.webp', 'rb')
                                bot.send_sticker(user_id, sticker)
                                bot.send_message(user_id, "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!")
                            else:  # 81% - 100% EXCELLENT
                                sticker = open('res/kpopExcellent.webp', 'rb')
                                bot.send_sticker(user_id, sticker)
                                bot.send_message(user_id, "–°—É–ø–µ—Ä! –û—Ç–ª–∏—á–Ω–æ, –º–æ–ª–æ–¥–µ—Ü!")

                            if user_states:
                                if user_states[user_id] is not None:
                                    del user_states[user_id]
                else:
                    bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
                    if user_states:
                        if user_states[user_id] is not None:
                            del user_states[user_id]
        else:
            bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
            if user_states:
                if user_states[user_id] is not None:
                    del user_states[user_id]
    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]

##########################################################################################
# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
@bot.message_handler(func=lambda message: message.text.lower() == btn_info_txt.lower())
def info(message):
    try:
        user_id = message.chat.id
        
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]

        sticker = open('res/kpopCreator.webp', 'rb')
        bot.send_sticker(message.chat.id, sticker)

        bot.send_message(user_id, "üá∞üá∑ –Ø –í–∞—à <b>–ö–æ—Ä–µ–π—Å–∫–∏–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</b> ‚ò∫Ô∏è.\n<b>{0.first_name}</b>, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –º–æ–≥—É –ø–æ–º–æ—á—å –í–∞–º —Ç–æ–ª—å–∫–æ –∑–∞—É—á–∏–≤–∞—Ç—å –∫–æ—Ä–µ–π—Å–∫–∏–µ —Å–ª–æ–≤–∞. –Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –∞ –í—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ. –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —è —É–∂–µ –±—É–¥—É –¥–∞–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤. –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n<b>1. {1}</b> - –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –Ω–∞ –∫–æ—Ä–µ–π—Å–∫–æ–º —è–∑—ã–∫–µ, –∞ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n<b>2. {2}</b> - –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∞ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ—Ä–µ–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n3. <b>{3}</b> - –∑–¥–µ—Å—å –∂–µ –±—É–¥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º <b>10</b> —Å–ª–æ–≤ –∏–∑ –º–æ–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è, –∞ –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∂–µ –±—É–¥–µ—Ç —Å–ª—É—á–∞–Ω—ã–º.\n<b>–£ –º–µ–Ω—è –µ—Å—Ç—å –µ—â–µ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏: üî†\n<b>1</b>. {4}</b> - —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–º–æ–∂–µ—Ç –í–∞–º –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ.\n<b><b>2</b>. {5}</b> - —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞, –ø–æ–º–æ–∂–µ—Ç –í–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –í–∞—Å —Å–ª–æ–≤–æ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∏ —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ—Å—Ç–≤–∏—è: <b>{6}</b>, <b>{7}</b>, <b>{8}</b> –∏ <b>{9}</b>.\n<b><b>3</b>. {10}</b> - –Ω–∞–∂–∞–≤ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É, —è –ø–æ–∫–∞–∂—É –í–∞–º —Å–≤–æ–π <b>—Å–ª–æ–≤–∞—Ä—å</b>, –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É—é –µ–≥–æ —Ç–∞–∫, –∫–∞–∫ –í—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ.\n–ï—Å—Ç—å <b>3</b> –≤–∏–¥–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:\n<b>1</b>. <b>{11}</b>\n<b>2</b>. <b>{12}</b>\n<b>3</b>. <b>{13}</b>\n–¢–∞–∫–∂–µ –¥–ª—è –±–æ–ª–µ–µ <b><i>—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ</i></b> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –í–∞–º —Å–ª–µ–¥—É–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ <b><u>–ø–∞—Ä—É</u> <u>–ø—Ä–∞–≤–∏–ª</u></b>, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å–∞–Ω—ã –Ω–∏–∂–µ. ‚¨áÔ∏è".format(message.from_user, btn_kor_rus_test_txt, btn_rus_kor_test_txt, btn_random_ten_words_txt, btn_add_word_txt, btn_find_word_txt, btn_edit_word_txt, btn_edit_translation_txt, btn_edit_category_txt, btn_delete_full_word_translation_category_txt, btn_all_words_txt, btn_all_words_korean_sort_txt, btn_all_words_russian_sort_txt, btn_all_words_category_sort_txt), parse_mode='html')
        
        bot.send_message(user_id, """<b><u>–ü—Ä–∞–≤–∏–ª–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</u></b>:\n<b>1</b>. –ö–æ–≥–¥–∞ –í—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω—è–µ—Ç–µ <b>—Å–ª–æ–≤–æ/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ</b>, <b>–ø–µ—Ä–µ–≤–æ–¥</b> –∏ <b>–∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>, —Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ <b>'/'</b> –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ —Å–ª–æ–≤–∞. –°–∏–º–≤–æ–ª <b>'/'</b> –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥ ü§ñ.\n<b>2</b>. –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º, –∏ –µ—Å–ª–∏ —è –Ω–µ —Å–º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –í–∞—à–∏ —Å–ª–æ–≤–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã, —Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ</b> –º–µ–Ω—è. üòÆ‚Äçüí® –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ <b>{3}</b> –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ <b>{4}</b>.\n<b>3</b>. –ï—Å–ª–∏ –í—ã –≤–¥—Ä—É–≥ –Ω–∞–π–¥–µ—Ç–µ –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –æ—à–∏–±–∫—É –≤–æ –º–Ω–µ –∏–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–¥–µ—è–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –º–µ–Ω—è, —Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –º–æ–µ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @SourceCode20000530.""".format(message.from_user.first_name, btn_all_words_txt, btn_find_word_txt, btn_restart_russian_txt, btn_restart_english_txt.lower()), parse_mode='html')
    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]

##########################################################################################
# –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≤—ã–≤–æ–¥–µ –≤—Å–µ —Å–ª–æ–≤ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —Å–ª–æ–≤–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–≤ –∏—Ö –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ:
# 1. –ü–æ –∫–æ—Ä–µ–π—Å–∫–æ–º—É —è–∑—ã–∫—É
# 2. –ü–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É
# 3. –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
@bot.message_handler(func=lambda message: message.text.lower() == btn_all_words_txt.lower())
def print_all_words(message):
    try:
        user_id = message.chat.id

        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]

        user_states[user_id] = {"state" : "PRINT_ALL_WORDS"}

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn_all_words_korean_sort = types.KeyboardButton(btn_all_words_korean_sort_txt)
        btn_all_words_russian_sort = types.KeyboardButton(btn_all_words_russian_sort_txt)
        btn_all_words_category_sort = types.KeyboardButton(btn_all_words_category_sort_txt)
        btn_cancel = types.KeyboardButton(btn_cancel_txt)

        markup.add(btn_all_words_korean_sort, btn_all_words_russian_sort, btn_all_words_category_sort, btn_cancel)
        
        bot.send_message(user_id, "–ö–∞–∫ –í—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª —Å–ª–æ–≤–∞—Ä—å?", reply_markup=markup)
    
    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get("state") == PRINT_ALL_WORDS)
def print_all_words_choice(message):
    try:
        user_id = message.chat.id
        if user_states:
            if user_states[user_id] is not None:
                user_states[user_id]["choice"] = message.text
            
                if user_states[user_id]["choice"] == btn_all_words_korean_sort_txt:
                    bot.send_message(user_id, "–•–æ—Ä–æ—à–æ. –Ø –≤—ã–¥–∞—é —Å–ª–æ–≤–∞—Ä—å, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –∫–æ—Ä–µ–π—Å–∫–æ–º—É –∞–ª—Ñ–∞–≤–∏—Ç—É:")
                    sorted_korean_words = sorted(koreanList, key=lambda x: (x.lower() if isinstance(x, str) else x))
                    sorted_russian_words = []
                    sorted_category_words = []

                    conn = sqlite3.connect('voc.db')
                    # –¢–µ–ø–µ—Ä—å –∑–∞—Ä–∞–Ω–µ–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                    for i in range(len(sorted_korean_words)):
                        cursor = conn.cursor()
                        cursor.execute("SELECT russian FROM words WHERE korean = ?", (sorted_korean_words[i],))
                        result = cursor.fetchone()
                        sorted_russian_words.append(result[0])
                    conn.close()

                    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    conn = sqlite3.connect('voc.db')
                    cursor = conn.cursor()
                    for i in range(len(sorted_korean_words)):
                        cursor.execute("SELECT category FROM words WHERE korean = ?", (sorted_korean_words[i],))
                        result = cursor.fetchone()
                        sorted_category_words.append(result[0])
                    conn.close()

                    sorted_words_text = "" 
                    for i in range(len(sorted_korean_words)):
                        sorted_words_text = sorted_words_text + str(i+1) + ". " + "<b>" + sorted_korean_words[i] + "</b>" + " - " + "<b>" + sorted_russian_words[i] + "</b>" + "   {üìö–ö–∞—Ç–µ–≥–æ—Ä–∏—è[" + "<b>" + sorted_category_words[i] + "</b>" + "]}" + "\n"

                elif user_states[user_id]["choice"] == btn_all_words_russian_sort_txt:
                    bot.send_message(user_id, "–•–æ—Ä–æ—à–æ. –Ø –≤—ã–¥–∞—é —Å–ª–æ–≤–∞—Ä—å, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —Ä—É—Å—Å–∫–æ–º—É –∞–ª—Ñ–∞–≤–∏—Ç—É:")

                    sorted_russian_words = sorted(russianList)
                    sorted_korean_words = [] 
                    sorted_category_words = []

                    conn = sqlite3.connect('voc.db')
                    cursor = conn.cursor()
                
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–µ–π—Å–∫–∏–µ —Å–ª–æ–≤–∞
                    for i in range(len(sorted_russian_words)):
                        cursor.execute("SELECT korean FROM words WHERE russian = ?", (sorted_russian_words[i],))
                        result = cursor.fetchone()
                        sorted_korean_words.append(result[0])
                    conn.close()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    conn = sqlite3.connect('voc.db')
                    cursor = conn.cursor()
                    for i in range(len(sorted_korean_words)):
                        cursor.execute("SELECT category FROM words WHERE russian = ?", (sorted_russian_words[i],))
                        result = cursor.fetchone()
                        sorted_category_words.append(result[0])
                    conn.close()

                    sorted_words_text = ""
                    for i in range(len(sorted_russian_words)):
                        sorted_words_text = sorted_words_text + str(i+1) + ". " + "<b>" + sorted_russian_words[i] + "</b>" + " - " + "<b>" + sorted_korean_words[i] + "</b>" + "   {üìö–ö–∞—Ç–µ–≥–æ—Ä–∏—è[" + "<b>" + sorted_category_words[i] + "</b>" + "]}" + "\n"

                elif user_states[user_id]["choice"] == btn_all_words_category_sort_txt:
                    bot.send_message(user_id, "–•–æ—Ä–æ—à–æ. –Ø –≤—ã–¥–∞—é —Å–ª–æ–≤–∞—Ä—å, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")

                    sorted_russian_words = []
                    sorted_korean_words = []
                    sorted_category_words = sorted(set(categoryList))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    sorted_words_text = ""

                    conn = sqlite3.connect('voc.db')
                    cursor = conn.cursor()

                    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    for category in sorted_category_words:
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ—Ä–µ–π—Å–∫–∏–µ –∏ —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        cursor.execute("SELECT korean, russian FROM words WHERE category = ?", (category,))
                        results = cursor.fetchall()
                
                        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–ø–∏—Å–∫–∏ –∏ —Ç–µ–∫—Å—Ç
                        if results:
                            sorted_words_text += f"üìö–ö–∞—Ç–µ–≥–æ—Ä–∏—è [{category}]:\n"
                            for i, (korean_word, russian_word) in enumerate(results, 1):
                                sorted_korean_words.append(korean_word)
                                sorted_russian_words.append(russian_word)
                                sorted_words_text += f"{i}. {korean_word} - {russian_word}\n"
                            sorted_words_text += "\n"  # –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    conn.close()

                    sorted_words_text += "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: " + "<b>" + str(len(sorted_korean_words)) + "</b>"
                else:
                    pass

                bot.send_message(user_id, sorted_words_text, reply_markup=create_main_menu(), parse_mode='html')
                if user_states:
                    if user_states[user_id] is not None:
                        del user_states[user_id]
        else:
            bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
            if user_states:
                if user_states[user_id] is not None:
                    del user_states[user_id]
    except requests.exceptions.Timeout:
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ.", reply_markup=create_main_menu())
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    except:
        bot.send_message(user_id, "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ üôÇ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " + "<b>'" + btn_restart_russian_txt + "'</b>.", reply_markup=create_restart_button(), parse_mode='html')
        if user_states:
            if user_states[user_id] is not None:
                del user_states[user_id]
    finally:
        conn.close()

##########################################################################################
# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
# [----------------------------------------------]
# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
notify_sun = '‚õÖÔ∏è'
notify_moon = 'üåó'
notification_point = ''
morning_notification = ""
evening_notification = ""

notification_part_greeting = ""
notification_part_message = ""

def generate_morning_notification():
    conn = sqlite3.connect('voc.db')
    cursor = conn.cursor()
   
    for chat_id in data_users_id:
        cursor.execute("SELECT first_name FROM users WHERE id = ?", (chat_id,))
        result = cursor.fetchone()
        name = result[0]
        notification_part_greeting = random.choice(morning_greetings)
        notification_part_message = random.choice(morning_message)

        morning_notification = notify_sun + " " + "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –°–∞–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è!"

        bot.send_message(chat_id, morning_notification, parse_mode='html')
    conn.close()

def generate_evening_notification():
    conn = sqlite3.connect('voc.db')
    cursor = conn.cursor()
   
    for chat_id in data_users_id:
        cursor.execute("SELECT first_name FROM users WHERE id = ?", (chat_id,))
        result = cursor.fetchone()
        name = result[0]
        notification_part_greeting = random.choice(evening_greetings)
        notification_part_message = random.choice(evening_message)

        evening_notification = notify_moon + " " + "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –°–∞–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è!"

        bot.send_message(chat_id, evening_notification, parse_mode='html')
    conn.close()

def schedule_daily_morning_messages(hour, minute):
    while True:
        now = datetime.now()
        target_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
        
        if now > target_time:
            target_time += timedelta(days=1)
        
        time_to_wait = (target_time - now).total_seconds()
        time.sleep(time_to_wait)

        generate_morning_notification()

def schedule_daily_evening_messages(hour, minute):
    while True:
        now = datetime.now()
        target_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
        
        if now > target_time:
            target_time += timedelta(days=1)
        
        time_to_wait = (target_time - now).total_seconds()
        time.sleep(time_to_wait)
        
        generate_evening_notification()

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
threading.Thread(target=schedule_daily_morning_messages, args=(7, 00), daemon=True).start()
threading.Thread(target=schedule_daily_evening_messages, args=(21, 30), daemon=True).start()

# RUN
if __name__ == '__main__':
    bot.polling(none_stop=True)